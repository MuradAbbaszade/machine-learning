# -*- coding: utf-8 -*-
"""breast_cancer_prediction_xgb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NvED2deRcM-BC63HRNQoxgTFCXpRU68x
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from xgboost import XGBClassifier
from sklearn import metrics

# Data processing
house_data_unstructured = sklearn.datasets.load_breast_cancer()
house_data_structured = pd.DataFrame(house_data_unstructured.data,columns=house_data_unstructured.feature_names)
house_data_structured["is_malignant"]=pd.DataFrame(house_data_unstructured.target)

#Check missing values
house_data_structured.isnull().sum()

house_data_structured.head()

#Describe
house_data_structured.describe()

# Find correlation between features
correlation=house_data_structured.corr()
plt.figure(figsize=(10,10))
sns.heatmap(correlation,annot=True,fmt=".0f",annot_kws={"size":10})

# Positive correlation - if one value increases/decreases other value also increases/decreases
# Negative correlation - if one value increases/decreases other value also decreases/increases

# Separate data
X=house_data_structured.drop(columns="is_malignant",axis=1)
Y=house_data_structured["is_malignant"]
print(X,Y)

# Spliting data into test and training data
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=1)

# Model training
model = XGBClassifier()
model.fit(X_train,Y_train)

# Model testing
train_prediction = model.predict(X_train)
train_data_accuracy_score = accuracy_score(train_prediction,Y_train)
print(train_data_accuracy_score)

test_prediction = model.predict(X_test)
test_data_accuracy_score = accuracy_score(test_prediction,Y_test)
print(test_data_accuracy_score)

